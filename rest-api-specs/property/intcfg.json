{
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>",
    "title": "OPERA Cloud Integration Configuration API",
    "version": "23.2",
    "termsOfService": "https://www.oracle.com/legal/terms.html",
    "contact": {
      "email": "hospitality-integrations_ww@oracle.com"
    },
    "license": {
      "name": "UPL",
      "url": "https://opensource.org/licenses/upl"
    }
  },
  "basePath": "/int/config/v1",
  "paths": {
    "/deliveryMethods": {
      "get": {
        "description": " <p><strong>OperationId:</strong>getDeliveryMethods</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to fetch delivery methods.",
        "operationId": "getDeliveryMethods",
        "parameters": [
          {
            "type": "string",
            "description": "Property code.",
            "name": "hotelId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "CRO code.",
            "name": "croCode",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "General",
                "QueueReservation",
                "Confirmation",
                "GuestMessage",
                "BillingFolio",
                "QueueRush",
                "AR",
                "OtherFolio"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Settings for Text Message Delivery of Queue Reservation status",
            "name": "usages",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true this will include inactive records(This is only applicable for general SMTP delivery method ).",
            "name": "includeInactive",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Response to request to fetch the delivery method for a property/HUB/Chain and its configurations.",
            "schema": {
              "$ref": "#/definitions/fetchedDeliveryMethods"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              }
            }
          },
          "204": {
            "description": "DeliveryMethods not found."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "put": {
        "description": " <p><strong>OperationId:</strong>putDeliveryMethods</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to change delivery methods.",
        "operationId": "putDeliveryMethods",
        "parameters": [
          {
            "description": "Request to change the delivery method for a property/HUB/Chain and its configurations.",
            "name": "changeDeliveryMethods",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/changeDeliveryMethods"
                }
              ]
            }
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Existing Operations Responses will eventually be modified to be extended from this type.",
            "schema": {
              "$ref": "#/definitions/changedDeliveryMethods"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "post": {
        "description": " <p><strong>OperationId:</strong>postDeliveryMethods</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to create delivery methods.",
        "operationId": "postDeliveryMethods",
        "parameters": [
          {
            "description": "Request to create the delivery method for a property/HUB/Chain and its configurations.",
            "name": "createDeliveryMethods",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/createDeliveryMethods"
                }
              ]
            }
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "delete": {
        "description": " <p><strong>OperationId:</strong>deleteDeliveryMethods</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to remove delivery methods.",
        "operationId": "deleteDeliveryMethods",
        "parameters": [
          {
            "type": "string",
            "description": "Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.",
            "name": "hotelId",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "enum": [
              "General",
              "QueueReservation",
              "Confirmation",
              "GuestMessage",
              "BillingFolio",
              "QueueRush",
              "AR",
              "OtherFolio"
            ],
            "type": "string",
            "description": "Settings for Text Message Delivery of Queue Reservation status",
            "name": "type",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "Email",
                "Fax",
                "TextMessage",
                "Sftp"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "SFTP delivery configurations",
            "name": "options",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "description": "Unique id associated with this configuration",
            "name": "configurationId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/deviceLocations": {
      "get": {
        "description": "Use this API to get the template device locations. <p><strong>OperationId:</strong>getTemplateDeviceLocations</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ChainConfig"
        ],
        "summary": "Get the template device locations",
        "operationId": "getTemplateDeviceLocations",
        "parameters": [
          {
            "type": "boolean",
            "default": "false",
            "description": "Determines wether to fetch inactive records or not.",
            "name": "fetchInactive",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "maxItems": 4000,
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "name": "codes",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Wildcard search on the code.",
            "name": "wildCard",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Description of the code.",
            "name": "description",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object for fetching template Device locations.",
            "schema": {
              "$ref": "#/definitions/templateDeviceLocationsDetails"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              }
            }
          },
          "204": {
            "description": "TemplateDeviceLocations not found."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "post": {
        "description": "Use this API to create the template device locations. <p><strong>OperationId:</strong>postTemplateDeviceLocations</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ChainConfig"
        ],
        "summary": "Create the template device locations",
        "operationId": "postTemplateDeviceLocations",
        "parameters": [
          {
            "description": "Request object for creating template Device locations.",
            "name": "templateDeviceLocationsCriteria",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/templateDeviceLocationsCriteria"
                }
              ]
            }
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/deviceLocations/{deviceLocationId}": {
      "put": {
        "description": "Use this API to update the template device locations. <p><strong>OperationId:</strong>changeTemplateDeviceLocations</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ChainConfig"
        ],
        "summary": "Change the template device locations",
        "operationId": "changeTemplateDeviceLocations",
        "parameters": [
          {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "Unique ID of device location.",
            "name": "deviceLocationId",
            "in": "path",
            "required": true
          },
          {
            "description": "Request object for changing template Device locations.",
            "name": "templateDeviceLocationsToBeChanged",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/templateDeviceLocationsToBeChanged"
                }
              ]
            }
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Existing Operations Responses will eventually be modified to be extended from this type.",
            "schema": {
              "$ref": "#/definitions/status"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "delete": {
        "description": "Use this API to delete the template device locations. <p><strong>OperationId:</strong>removeTemplateDeviceLocations</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ChainConfig"
        ],
        "summary": "Delete the template device locations",
        "operationId": "removeTemplateDeviceLocations",
        "parameters": [
          {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "Unique ID of device location.",
            "name": "deviceLocationId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/externalSystems/{externalSystemCode}/hotels/{hotelId}/publishers": {
      "post": {
        "description": " <p><strong>OperationId:</strong>postPublishers</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to create publishers.",
        "operationId": "postPublishers",
        "parameters": [
          {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "Unique OPERA Id used to find a property in OPERA.",
            "name": "hotelId",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "Unique OPERA Code used to find External System in OPERA.",
            "name": "externalSystemCode",
            "in": "path",
            "required": true
          },
          {
            "description": "Request to create publishers.",
            "name": "createPublishers",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/createPublishers"
                }
              ]
            }
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "delete": {
        "description": " <p><strong>OperationId:</strong>deletePublisher</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to remove publisher.",
        "operationId": "deletePublisher",
        "parameters": [
          {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "Unique OPERA Id used to find a property in OPERA.",
            "name": "hotelId",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "Unique OPERA Code used to find External System in OPERA.",
            "name": "externalSystemCode",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscriberHotelId",
            "in": "query"
          },
          {
            "type": "string",
            "name": "code",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/externalSystems/{externalSystemCode}/publishers": {
      "get": {
        "description": " <p><strong>OperationId:</strong>getPublishers</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to fetch publishers.",
        "operationId": "getPublishers",
        "parameters": [
          {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "Unique OPERA Code used to find External System in OPERA.",
            "name": "externalSystemCode",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "hotelId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Response to request to fetch the external systems",
            "schema": {
              "$ref": "#/definitions/fetchedPublishers"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              }
            }
          },
          "204": {
            "description": "Publishers not found."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/hotelInterfaceTypes": {
      "get": {
        "description": " <p><strong>OperationId:</strong>getHotelInterfaces</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to fetch hotel interfaces.",
        "operationId": "getHotelInterfaces",
        "parameters": [
          {
            "type": "array",
            "items": {
              "maxItems": 4000,
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "hotelIds",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "Bms",
                "Cas",
                "Ccw",
                "Dls",
                "Eft",
                "Exp",
                "Mak",
                "Mbs",
                "Msc",
                "Pbx",
                "Pos",
                "Svs",
                "Tik",
                "Vid",
                "Vms",
                "Www",
                "Xml"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "XML Posting Interface",
            "name": "interfaceTypes",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "maxItems": 4000,
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "logosCodes",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true this will set the criteria to include inactive records.",
            "name": "includeInactive",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object for retrieving Hotel Interfaces.",
            "schema": {
              "$ref": "#/definitions/fetchedHotelInterfaces"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              }
            }
          },
          "204": {
            "description": "HotelInterfaces not found."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/hotels/{hotelId}/hotelInerface": {
      "delete": {
        "description": " <p><strong>OperationId:</strong>deleteHotelInterface</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to remove hotel interface.",
        "operationId": "deleteHotelInterface",
        "parameters": [
          {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "name": "hotelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.",
            "name": "logo",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/interfaceControllerRegistry": {
      "get": {
        "description": " <p><strong>OperationId:</strong>getHotelInterfaceControllerRegistry</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to fetch hotel interface controller registry.",
        "operationId": "getHotelInterfaceControllerRegistry",
        "parameters": [
          {
            "type": "string",
            "description": "Used for Character Strings, length 0 to 40.",
            "name": "machine",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object for retrieving Hotel Interface Controller Registry.",
            "schema": {
              "$ref": "#/definitions/fetchedHotelInterfaceControllerRegistry"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              }
            }
          },
          "204": {
            "description": "HotelInterfaceControllerRegistry not found."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/interfaceErrors": {
      "get": {
        "description": " <p><strong>OperationId:</strong>getHotelInterfaceErrors</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to fetch hotel interface errors.",
        "operationId": "getHotelInterfaceErrors",
        "parameters": [
          {
            "type": "integer",
            "description": "Indicates maximum number of records a Web Service should return.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "maxItems": 4000,
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "hotelIds",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "Bms",
                "Cas",
                "Ccw",
                "Dls",
                "Eft",
                "Exp",
                "Mak",
                "Mbs",
                "Msc",
                "Pbx",
                "Pos",
                "Svs",
                "Tik",
                "Vid",
                "Vms",
                "Www",
                "Xml"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "XML Posting Interface",
            "name": "interfaceTypes",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "maxItems": 4000,
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "logoCodes",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true this will set the criteria to include inactive records.",
            "name": "includeInactive",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object for retrieving Hotel Interface Errors.",
            "schema": {
              "$ref": "#/definitions/fetchedHotelInterfaceErrors"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              }
            }
          },
          "204": {
            "description": "HotelInterfaceErrors not found."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/interfaceFailedMessages": {
      "get": {
        "description": " <p><strong>OperationId:</strong>getHotelInterfaceFailedMessages</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to fetch hotel interface failed messages.",
        "operationId": "getHotelInterfaceFailedMessages",
        "parameters": [
          {
            "type": "integer",
            "description": "Indicates maximum number of records a Web Service should return.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "maxItems": 4000,
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "hotelIds",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "Bms",
                "Cas",
                "Ccw",
                "Dls",
                "Eft",
                "Exp",
                "Mak",
                "Mbs",
                "Msc",
                "Pbx",
                "Pos",
                "Svs",
                "Tik",
                "Vid",
                "Vms",
                "Www",
                "Xml"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "XML Posting Interface",
            "name": "interfaceTypes",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "maxItems": 4000,
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "logoCodes",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true this will set the criteria to include inactive records.",
            "name": "includeInactive",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object for retrieving Hotel Interface Failed Messages.",
            "schema": {
              "$ref": "#/definitions/fetchedHotelInterfaceFailedMessages"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              }
            }
          },
          "204": {
            "description": "HotelInterfaceFailedMessages not found."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/interfaceRights": {
      "get": {
        "description": " <p><strong>OperationId:</strong>getInterfaceRights</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to fetch interface rights.",
        "operationId": "getInterfaceRights",
        "parameters": [
          {
            "type": "string",
            "description": "Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.",
            "name": "hotelId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
            "name": "id",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Additional identifying value assigned by the creating system.",
            "name": "idExtension",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "name": "idContext",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A reference to the type of object defined by the UniqueID element.",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Collection of Hotel Interface Tasks.",
            "schema": {
              "$ref": "#/definitions/fetchedInterfaceRights"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              }
            }
          },
          "204": {
            "description": "InterfaceRights not found."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "put": {
        "description": " <p><strong>OperationId:</strong>putInterfaceRight</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to change interface right.",
        "operationId": "putInterfaceRight",
        "parameters": [
          {
            "description": "Request object for updating a Hotel Interface Right. It will create the Hotel Interface Right if it does not exist on the database.",
            "name": "changeInterfaceRight",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/changeInterfaceRight"
                }
              ]
            }
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Existing Operations Responses will eventually be modified to be extended from this type.",
            "schema": {
              "$ref": "#/definitions/changedInterfaceRight"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "delete": {
        "description": " <p><strong>OperationId:</strong>deleteInterfaceRight</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to remove interface right.",
        "operationId": "deleteInterfaceRight",
        "parameters": [
          {
            "type": "string",
            "description": "Hotel Code to which the Interface Right belongs to.",
            "name": "hotelId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
            "name": "id",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Additional identifying value assigned by the creating system.",
            "name": "idExtension",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "name": "idContext",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A reference to the type of object defined by the UniqueID element.",
            "name": "type",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Internal code for each allowed right of a Hotel Interface record.",
            "name": "right",
            "in": "query"
          },
          {
            "type": "string",
            "description": "User defined code for an Interface Right.",
            "name": "code",
            "in": "query"
          },
          {
            "type": "string",
            "description": "User defined description for an Interface Right.",
            "name": "description",
            "in": "query"
          },
          {
            "type": "string",
            "description": "System Description of an allowed Interface Right.",
            "name": "interfaceRightDescription",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/interfaceSchemas": {
      "get": {
        "description": " <p><strong>OperationId:</strong>getHotelInterfaceSchemas</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to fetch hotel interface schemas.",
        "operationId": "getHotelInterfaceSchemas",
        "parameters": [
          {
            "type": "integer",
            "description": "Indicates maximum number of records a Web Service should return.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "maxItems": 4000,
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "hotelIds",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "Bms",
                "Cas",
                "Ccw",
                "Dls",
                "Eft",
                "Exp",
                "Mak",
                "Mbs",
                "Msc",
                "Pbx",
                "Pos",
                "Svs",
                "Tik",
                "Vid",
                "Vms",
                "Www",
                "Xml"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "XML Posting Interface",
            "name": "interfaceTypes",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "maxItems": 4000,
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "logoCodes",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true this will set the criteria to include inactive records.",
            "name": "includeInactive",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object for retrieving Hotel Interface Schemas.",
            "schema": {
              "$ref": "#/definitions/fetchedHotelInterfaceSchemas"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              }
            }
          },
          "204": {
            "description": "HotelInterfaceSchemas not found."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/interfaces/{interfaceId}/databases/{databaseId}/availableResorts": {
      "get": {
        "description": " <p><strong>OperationId:</strong>getExternalDatabaseAvailableProperties</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to fetch external database available properties.",
        "operationId": "getExternalDatabaseAvailableProperties",
        "parameters": [
          {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "OPERA Id for Databsase",
            "name": "databaseId",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "OPERA Id for interface",
            "name": "interfaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Flag that indicates to include inactive records.",
            "name": "includeInactive",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "maxItems": 4000,
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "interfaceCodes",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "maxItems": 4000,
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "hotelIds",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object for retrieving the Available properties for External Databases.",
            "schema": {
              "$ref": "#/definitions/fetchedExternalDatabaseAvailableProperties"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              }
            }
          },
          "204": {
            "description": "ExternalDatabaseAvailableProperties not found."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/udfMappings": {
      "get": {
        "description": "Operation to send a response to the Look-up of UDFs. <p><strong>OperationId:</strong>getUDFMappings</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to send a response to the Look up of UDFs.",
        "operationId": "getUDFMappings",
        "parameters": [
          {
            "type": "string",
            "description": "A reference to the type of object defined by the Type for Reservation and Profile Type.",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name of the user-defined function (UDF) field.",
            "name": "uDFName",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Message received on an UDFs Lookup.",
            "schema": {
              "$ref": "#/definitions/fetchedUDFMappings"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              }
            }
          },
          "204": {
            "description": "UDFMappings not found."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "put": {
        "description": "Operation to send a response to the Change in UDF. <p><strong>OperationId:</strong>putUDFMapping</p>",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ExternalSystemsConfig"
        ],
        "summary": "Operation to send a response to the Change in UDF.",
        "operationId": "putUDFMapping",
        "parameters": [
          {
            "description": "Self-contained Request object that is used when Updating UDFMapping.",
            "name": "changeUDFMapping",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/changeUDFMapping"
                }
              ]
            }
          },
          {
            "type": "string",
            "description": "Bearer token that needs to be passed which is generated post user authentication",
            "name": "authorization",
            "in": "header",
            "required": true
          },
          {
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
            "type": "string",
            "description": "Client or Partner's Application Key",
            "name": "x-app-key",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
            "name": "x-hotelid",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 80,
            "type": "string",
            "x-example": "EXTERNALSYSTEMCODE",
            "description": "External system code.",
            "name": "x-externalsystem",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Existing Operations Responses will eventually be modified to be extended from this type.",
            "schema": {
              "$ref": "#/definitions/changedUDFMapping"
            },
            "headers": {
              "Content-Language": {
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "type": "string",
                "description": "Audience language"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable."
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "414": {
            "description": "Request URI Too Large"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "System Error",
            "schema": {
              "$ref": "#/definitions/exceptionDetailType"
            }
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    }
  },
  "definitions": {
    "arDeliveryMethodType": {
      "description": "Delivery Method configuration for Email and Fax Delivery for Accounts Receivables.",
      "type": "object",
      "properties": {
        "email": {
          "$ref": "#/definitions/emailDeliveryConfigurationType"
        },
        "fax": {
          "$ref": "#/definitions/faxDeliveryConfigurationType"
        }
      }
    },
    "billingFolioDeliveryMethodType": {
      "description": "Billing folio delivery method configuration, settings for Email and Fax Delivery of Guest Folios",
      "type": "object",
      "properties": {
        "email": {
          "$ref": "#/definitions/emailDeliveryConfigurationType"
        },
        "fax": {
          "$ref": "#/definitions/faxDeliveryConfigurationType"
        }
      }
    },
    "changeDeliveryMethods": {
      "description": "Request to change the delivery method for a property/HUB/Chain and its configurations.",
      "type": "object",
      "properties": {
        "deliveryMethods": {
          "description": "Collection of delivery method types to change.",
          "$ref": "#/definitions/configuredExternalDeliveryMethodsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "changeInterfaceRight": {
      "description": "Request object for updating a Hotel Interface Right. It will create the Hotel Interface Right if it does not exist on the database.",
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/interfaceRightType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "changeUDFMapping": {
      "description": "Self-contained Request object that is used when Updating UDFMapping.",
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/links"
        },
        "uDFMapping": {
          "$ref": "#/definitions/uDFMappingType"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "changedDeliveryMethods": {
      "description": "Existing Operations Responses will eventually be modified to be extended from this type.",
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "changedInterfaceRight": {
      "description": "Existing Operations Responses will eventually be modified to be extended from this type.",
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "changedUDFMapping": {
      "description": "Existing Operations Responses will eventually be modified to be extended from this type.",
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "conditionGroupType": {
      "type": "object",
      "properties": {
        "condition": {
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/conditionType"
          }
        },
        "conditionGroup": {
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/conditionGroupType"
          }
        },
        "logicalOperator": {
          "$ref": "#/definitions/logicalOperatorType"
        }
      }
    },
    "conditionType": {
      "type": "object",
      "properties": {
        "leftExpression": {
          "$ref": "#/definitions/expressionFieldType"
        },
        "logicalOperator": {
          "$ref": "#/definitions/logicalOperatorType"
        },
        "operator": {
          "$ref": "#/definitions/expressionOperatorType"
        },
        "rightExpression": {
          "$ref": "#/definitions/expressionParameterType"
        }
      }
    },
    "configuredExternalDeliveryMethodsType": {
      "description": "External system configuration delivery methods for a property(chain or hub).",
      "type": "object",
      "properties": {
        "ar": {
          "$ref": "#/definitions/arDeliveryMethodType"
        },
        "billingFolio": {
          "$ref": "#/definitions/billingFolioDeliveryMethodType"
        },
        "confirmation": {
          "$ref": "#/definitions/confirmationDeliveryMethodType"
        },
        "general": {
          "$ref": "#/definitions/generalDeliveryMethodType"
        },
        "guestMessage": {
          "$ref": "#/definitions/guestMessageDeliveryMethodType"
        },
        "otherFolios": {
          "$ref": "#/definitions/otherFolioDeliveryMethodType"
        },
        "queueReservation": {
          "$ref": "#/definitions/queueReservationDeliveryMethodType"
        },
        "queueRush": {
          "$ref": "#/definitions/queueRushDeliveryMethodType"
        }
      }
    },
    "confirmationDeliveryMethodType": {
      "description": "Confirmation letter delivery method configuration, settings for Text Message, Email and Fax Delivery of Confirmation Letters",
      "type": "object",
      "properties": {
        "email": {
          "$ref": "#/definitions/emailDeliveryConfigurationType"
        },
        "fax": {
          "$ref": "#/definitions/faxDeliveryConfigurationType"
        },
        "textMessage": {
          "$ref": "#/definitions/textMessageDeliveryConfigurationType"
        }
      }
    },
    "createDeliveryMethods": {
      "description": "Request to create the delivery method for a property/HUB/Chain and its configurations.",
      "type": "object",
      "properties": {
        "deliveryMethods": {
          "description": "Collection of delivery method types to create.",
          "$ref": "#/definitions/configuredExternalDeliveryMethodsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "createPublishers": {
      "description": "Request to create publishers.",
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/links"
        },
        "publishers": {
          "description": "Collection of publisher external systems information.",
          "$ref": "#/definitions/publishersType"
        },
        "subscriber": {
          "description": "Subcriber external system information.",
          "$ref": "#/definitions/externalSystemType"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "emailDeliveryConfigurationType": {
      "description": "Email content configuration template",
      "type": "object",
      "properties": {
        "activateDelivery": {
          "description": "This option must be selected in order to activate emailing from an SMTP compliant email server",
          "type": "boolean"
        },
        "attachICalender": {
          "type": "boolean"
        },
        "body": {
          "type": "string",
          "maxLength": 2000,
          "minLength": 0
        },
        "format": {
          "description": "EMAIL Format: HTML, RTF, PDF. Fax Format: TIF",
          "$ref": "#/definitions/emailDeliveryFormatType"
        },
        "fromAddress": {
          "type": "string",
          "maxLength": 200,
          "minLength": 0
        },
        "hTMLFormatDelivery": {
          "description": "Available for Confirmation Letters only and when Activate Email Delivery is selected",
          "type": "boolean"
        },
        "hotelId": {
          "description": "Hotel code",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "serverName": {
          "type": "string",
          "maxLength": 80,
          "minLength": 0
        },
        "subject": {
          "type": "string",
          "maxLength": 2000,
          "minLength": 0
        },
        "type": {
          "description": "Deliver Type, possible values: AR, BILLING, CONFIRMATION, LEADS, OWS, OVOS.",
          "$ref": "#/definitions/emailDeliveryMethodType"
        },
        "userId": {
          "type": "string",
          "maxLength": 80,
          "minLength": 0
        },
        "userPassword": {
          "type": "string",
          "maxLength": 80,
          "minLength": 0
        }
      }
    },
    "emailDeliveryFormatType": {
      "description": "Email delivery format",
      "type": "string",
      "enum": [
        "Htmlcss",
        "Pdf",
        "Rtf",
        "Tif"
      ]
    },
    "emailDeliveryMethodType": {
      "description": "Email delivery method type",
      "type": "string",
      "enum": [
        "Billing",
        "Confirmation",
        "General",
        "Other",
        "AR"
      ]
    },
    "errorInstance": {
      "description": "Complex type that contains error instance details for a REST call.",
      "type": "object",
      "title": "Error Instance Details",
      "required": [
        "type",
        "title"
      ],
      "properties": {
        "detail": {
          "description": "Human-readable description specific to this occurrence of the problem.",
          "type": "string"
        },
        "instance": {
          "description": "Absolute URI that identifies the specific occurrence of the problem.  It may or may not provide additional information if dereferenced.",
          "type": "string"
        },
        "o:errorCode": {
          "description": "Application error code, which is different from HTTP error code.",
          "type": "string"
        },
        "o:errorPath": {
          "description": "Path to the problem at the resource or property level.",
          "type": "string"
        },
        "status": {
          "description": "HTTP status code for this occurrence of the problem, set by the origin server.",
          "type": "integer"
        },
        "title": {
          "description": "Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization.",
          "type": "string"
        },
        "type": {
          "description": "Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML).",
          "type": "string"
        }
      }
    },
    "exceptionDetailType": {
      "description": "Complex type that contains error details for a REST call.",
      "type": "object",
      "title": "Error Detail",
      "required": [
        "type",
        "title"
      ],
      "properties": {
        "detail": {
          "description": "Human-readable description specific to this occurrence of the problem.",
          "type": "string"
        },
        "instance": {
          "description": "Absolute URI that identifies the specific occurrence of the problem.  It may or may not provide additional information if dereferenced.",
          "type": "string"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "o:errorCode": {
          "description": "Application error code, which is different from HTTP error code.",
          "type": "string"
        },
        "o:errorDetails": {
          "description": "Details of the error message, consisting of a hierarchical tree structure.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/errorInstance"
          }
        },
        "o:errorPath": {
          "description": "Path to the problem at the resource or property level.",
          "type": "string"
        },
        "status": {
          "description": "HTTP status code for this occurrence of the problem, set by the origin server.",
          "type": "integer"
        },
        "title": {
          "description": "Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization.",
          "type": "string"
        },
        "type": {
          "description": "Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML).",
          "type": "string"
        }
      }
    },
    "expressionFieldType": {
      "type": "object",
      "properties": {
        "dataType": {
          "type": "string",
          "maxLength": 40,
          "minLength": 0
        },
        "fieldDescription": {
          "type": "string",
          "maxLength": 40,
          "minLength": 0
        },
        "fieldName": {
          "type": "string",
          "maxLength": 40,
          "minLength": 0
        },
        "lovSelected": {
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "tableName": {
          "type": "string",
          "maxLength": 40,
          "minLength": 0
        },
        "virtual": {
          "type": "boolean"
        }
      }
    },
    "expressionOperatorType": {
      "type": "object",
      "properties": {
        "operatorDescription": {
          "type": "string",
          "maxLength": 40,
          "minLength": 0
        },
        "operatorName": {
          "type": "string",
          "maxLength": 40,
          "minLength": 0
        },
        "parameterSize": {
          "type": "number"
        }
      }
    },
    "expressionParameterType": {
      "type": "object",
      "properties": {
        "functionIdOne": {
          "type": "number"
        },
        "functionIdTwo": {
          "type": "number"
        },
        "parameter": {
          "type": "array",
          "maxItems": 3,
          "items": {
            "type": "string",
            "maxLength": 40,
            "minLength": 0
          }
        }
      }
    },
    "externalDatabaseAssociatedHotelType": {
      "type": "object",
      "properties": {
        "hotelId": {
          "description": "Pertain associated hotel code for external database.",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "hotelName": {
          "description": "Pertain associated hotel code for external database.",
          "type": "string",
          "maxLength": 80,
          "minLength": 0
        }
      }
    },
    "externalDatabaseAssociatedHotelsType": {
      "description": "Collection of Hotel for external database.",
      "type": "array",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/externalDatabaseAssociatedHotelType"
      }
    },
    "externalSystemCodeType": {
      "description": "External System Code",
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "maxLength": 40,
          "minLength": 0
        }
      }
    },
    "externalSystemType": {
      "description": "External System Information",
      "type": "object",
      "properties": {
        "externalSystemCode": {
          "$ref": "#/definitions/externalSystemCodeType"
        },
        "hotelId": {
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        }
      }
    },
    "faxDeliveryConfigurationType": {
      "description": "Email content configuration template",
      "type": "object",
      "properties": {
        "activateEmailToFax": {
          "description": "This option must be selected in order to activate faxing from an SMTP compliant fax server",
          "type": "boolean"
        },
        "body": {
          "type": "string",
          "maxLength": 2000,
          "minLength": 0
        },
        "faxDomain": {
          "type": "string",
          "maxLength": 40,
          "minLength": 0
        },
        "faxPrefix": {
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "faxSuffix": {
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "format": {
          "description": "EMAIL Format: HTML, RTF, PDF. Fax Format: TIF",
          "$ref": "#/definitions/emailDeliveryFormatType"
        },
        "fromAddress": {
          "type": "string",
          "maxLength": 200,
          "minLength": 0
        },
        "hotelId": {
          "description": "Hotel code",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "serverName": {
          "type": "string",
          "maxLength": 80,
          "minLength": 0
        },
        "subject": {
          "type": "string",
          "maxLength": 2000,
          "minLength": 0
        },
        "type": {
          "description": "Deliver Type, possible values: AR, BILLING, CONFIRMATION, LEADS, OWS, OVOS.",
          "$ref": "#/definitions/emailDeliveryMethodType"
        },
        "userId": {
          "type": "string",
          "maxLength": 80,
          "minLength": 0
        },
        "userPassword": {
          "type": "string",
          "maxLength": 80,
          "minLength": 0
        }
      }
    },
    "fetchedDeliveryMethods": {
      "description": "Response to request to fetch the delivery method for a property/HUB/Chain and its configurations.",
      "type": "object",
      "properties": {
        "deliveryMethods": {
          "description": "Collection of all delivery method types.",
          "$ref": "#/definitions/configuredExternalDeliveryMethodsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "fetchedExternalDatabaseAvailableProperties": {
      "description": "Response object for retrieving the Available properties for External Databases.",
      "type": "object",
      "properties": {
        "availailableProperties": {
          "$ref": "#/definitions/externalDatabaseAssociatedHotelsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "fetchedHotelInterfaceControllerRegistry": {
      "description": "Response object for retrieving Hotel Interface Controller Registry.",
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/links"
        },
        "reg": {
          "description": "Collection of Hotel Interface Controller Registry.",
          "$ref": "#/definitions/hotelInterfaceControllerRegsType"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "fetchedHotelInterfaceErrors": {
      "description": "Response object for retrieving Hotel Interface Errors.",
      "type": "object",
      "properties": {
        "hasMore": {
          "description": "Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.",
          "type": "boolean"
        },
        "hotelInterfaceErrors": {
          "description": "Collection of Hotel Interface Errors.",
          "$ref": "#/definitions/hotelInterfaceErrorsType"
        },
        "limit": {
          "description": "Indicates maximum number of records a Web Service should return.",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "offset": {
          "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
          "type": "integer"
        },
        "totalPages": {
          "description": "Evaluated total page count based on the requested max fetch count.",
          "type": "integer"
        },
        "totalResults": {
          "description": "Total number of rows queried",
          "type": "integer"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "fetchedHotelInterfaceFailedMessages": {
      "description": "Response object for retrieving Hotel Interface Failed Messages.",
      "type": "object",
      "properties": {
        "hasMore": {
          "description": "Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.",
          "type": "boolean"
        },
        "limit": {
          "description": "Indicates maximum number of records a Web Service should return.",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "messages": {
          "description": "Collection of Hotel Interface Failed Messages.",
          "$ref": "#/definitions/hotelInterfaceFailedMessagesType"
        },
        "offset": {
          "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
          "type": "integer"
        },
        "totalPages": {
          "description": "Evaluated total page count based on the requested max fetch count.",
          "type": "integer"
        },
        "totalResults": {
          "description": "Total number of rows queried",
          "type": "integer"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "fetchedHotelInterfaceSchemas": {
      "description": "Response object for retrieving Hotel Interface Schemas.",
      "type": "object",
      "properties": {
        "hasMore": {
          "description": "Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.",
          "type": "boolean"
        },
        "limit": {
          "description": "Indicates maximum number of records a Web Service should return.",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "offset": {
          "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
          "type": "integer"
        },
        "schemas": {
          "description": "Collection of Hotel Interface Schemas.",
          "$ref": "#/definitions/hotelInterfaceSchemasType"
        },
        "totalPages": {
          "description": "Evaluated total page count based on the requested max fetch count.",
          "type": "integer"
        },
        "totalResults": {
          "description": "Total number of rows queried",
          "type": "integer"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "fetchedHotelInterfaces": {
      "description": "Response object for retrieving Hotel Interfaces.",
      "type": "object",
      "properties": {
        "hotelInterfaces": {
          "description": "Collection of Hotel Interfaces.",
          "$ref": "#/definitions/hotelInterfacesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "fetchedInterfaceRights": {
      "description": "Collection of Hotel Interface Rights.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/interfaceRightType"
      }
    },
    "fetchedPublishers": {
      "description": "Response to request to fetch the external systems",
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/links"
        },
        "publishers": {
          "description": "Collection of publisher external systems information.",
          "$ref": "#/definitions/publishersType"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "fetchedUDFMappings": {
      "description": "Message received on an UDFs Lookup.",
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/links"
        },
        "uDFMappings": {
          "description": "Criteria for fetching UDFs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/uDFMappingType"
          }
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "generalDeliveryMethodType": {
      "description": "General delivery method SFTPConfigurationType configuration, settings for Email and Fax Delivery of General Letters",
      "type": "object",
      "properties": {
        "email": {
          "$ref": "#/definitions/emailDeliveryConfigurationType"
        },
        "fax": {
          "$ref": "#/definitions/faxDeliveryConfigurationType"
        },
        "sftpConfigurations": {
          "$ref": "#/definitions/sftpConfigurationsListType"
        }
      }
    },
    "guestMessageDeliveryMethodType": {
      "description": "Guest text message configuration, settings for Text Message Delivery of Guest Messages",
      "type": "object",
      "properties": {
        "textMessage": {
          "$ref": "#/definitions/textMessageDeliveryConfigurationType"
        }
      }
    },
    "hotelInterfaceControllerRegType": {
      "type": "object",
      "properties": {
        "cntrlRegSetting": {
          "description": "Controller Registry Setting",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "data": {
          "description": "Data",
          "type": "string",
          "maxLength": 400,
          "minLength": 0
        },
        "description": {
          "description": "Description",
          "type": "string",
          "maxLength": 4000,
          "minLength": 0
        },
        "id": {
          "description": "Internal ID to reference the records.",
          "type": "number"
        },
        "machine": {
          "description": "Machine Name",
          "type": "string",
          "maxLength": 80,
          "minLength": 0
        }
      }
    },
    "hotelInterfaceControllerRegsType": {
      "description": "Collection of Hotel Interface Controller Registry.",
      "type": "array",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/hotelInterfaceControllerRegType"
      }
    },
    "hotelInterfaceErrorType": {
      "type": "object",
      "properties": {
        "actionName": {
          "description": "Action Name",
          "type": "string",
          "maxLength": 40,
          "minLength": 0
        },
        "error": {
          "description": "Error",
          "type": "string",
          "maxLength": 2000,
          "minLength": 0
        },
        "hotelId": {
          "description": "Hotel Code",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "ifcType": {
          "description": "ifcType",
          "type": "string",
          "maxLength": 4000,
          "minLength": 0
        },
        "insertDate": {
          "description": "Date time stamp of a Hotel Interface Schema.",
          "type": "string",
          "format": "date-time"
        },
        "logo": {
          "description": "Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "message": {
          "description": "Message",
          "type": "string",
          "maxLength": 4000,
          "minLength": 0
        },
        "resvNameId": {
          "description": "Schema",
          "type": "string",
          "maxLength": 40,
          "minLength": 0
        }
      }
    },
    "hotelInterfaceErrorsType": {
      "description": "Collection of Hotel Interface Errors.",
      "type": "array",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/hotelInterfaceErrorType"
      }
    },
    "hotelInterfaceFailedMessageType": {
      "type": "object",
      "properties": {
        "actionName": {
          "description": "Action Name",
          "type": "string",
          "maxLength": 40,
          "minLength": 0
        },
        "hotelId": {
          "description": "Hotel Code",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "ifcType": {
          "description": "ifcType",
          "type": "string",
          "maxLength": 4000,
          "minLength": 0
        },
        "insertDate": {
          "description": "Date time stamp of a Hotel Interface Schema.",
          "type": "string",
          "format": "date-time"
        },
        "logo": {
          "description": "Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "message": {
          "description": "Message",
          "type": "string",
          "maxLength": 4000,
          "minLength": 0
        }
      }
    },
    "hotelInterfaceFailedMessagesType": {
      "description": "Collection of Hotel Interface Failed Messages.",
      "type": "array",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/hotelInterfaceFailedMessageType"
      }
    },
    "hotelInterfaceSchemaType": {
      "type": "object",
      "properties": {
        "actionName": {
          "description": "Action Name",
          "type": "string",
          "maxLength": 40,
          "minLength": 0
        },
        "hotelId": {
          "description": "Hotel Code",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "ifcType": {
          "description": "ifcType",
          "type": "string",
          "maxLength": 4000,
          "minLength": 0
        },
        "insertDate": {
          "description": "Date time stamp of a Hotel Interface Schema.",
          "type": "string",
          "format": "date-time"
        },
        "logo": {
          "description": "Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "schema": {
          "description": "Schema",
          "type": "string",
          "maxLength": 4000,
          "minLength": 0
        },
        "schemaName": {
          "description": "Schema Name",
          "type": "string",
          "maxLength": 40,
          "minLength": 0
        }
      }
    },
    "hotelInterfaceSchemasType": {
      "description": "Collection of Hotel Interface Schemas.",
      "type": "array",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/hotelInterfaceSchemaType"
      }
    },
    "hotelInterfaceStatusType": {
      "description": "Status of the Hotel Interface either STOPPED or RUNNING.",
      "type": "string",
      "enum": [
        "Stopped",
        "Running",
        "Waiting",
        "StopInitiated",
        "StartInitiated",
        "RebootInitiated",
        "Other"
      ]
    },
    "hotelInterfaceType": {
      "type": "object",
      "properties": {
        "activeFlag": {
          "description": "Indicator if the Hotel Interface is active or not. This is different from the Interface Status, which is either STOPPED or RUNNING.",
          "type": "boolean"
        },
        "hotelId": {
          "description": "Hotel Code",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "interfaceId": {
          "description": "Unique DB internal number of a Hotel Interface record.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "interfaceName": {
          "description": "Name of the Hotel Interface",
          "type": "string",
          "maxLength": 40,
          "minLength": 0
        },
        "interfaceType": {
          "description": "Three letter code for each interface that identifies the interface.",
          "$ref": "#/definitions/hotelInterfaceTypeType"
        },
        "logo": {
          "description": "Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "machineName": {
          "description": "Unique machine name of the running IFC.",
          "type": "string",
          "maxLength": 80,
          "minLength": 0
        },
        "status": {
          "description": "The current status of the IFC.",
          "$ref": "#/definitions/hotelInterfaceStatusType"
        }
      }
    },
    "hotelInterfaceTypeType": {
      "description": "XML Posting Interface",
      "type": "string",
      "enum": [
        "Bms",
        "Cas",
        "Ccw",
        "Dls",
        "Eft",
        "Exp",
        "Mak",
        "Mbs",
        "Msc",
        "Pbx",
        "Pos",
        "Svs",
        "Tik",
        "Vid",
        "Vms",
        "Www",
        "Xml"
      ]
    },
    "hotelInterfacesType": {
      "description": "Collection of Hotel Interfaces.",
      "type": "array",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/hotelInterfaceType"
      }
    },
    "instanceLink": {
      "description": "Metadata describing link description objects that MAY appear in the JSON instance representation.",
      "type": "object",
      "required": [
        "href",
        "rel",
        "method",
        "operationId"
      ],
      "properties": {
        "href": {
          "description": "URI [RFC3986] or URI Template [RFC6570]. If the value is set to URI Template, then the \"templated\" property must be set to true.",
          "type": "string"
        },
        "method": {
          "description": "HTTP method for requesting the target of the link.",
          "type": "string",
          "enum": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH",
            "OPTIONS",
            "HEAD"
          ]
        },
        "operationId": {
          "description": "The operationId of the path you can call to follow this link.  This allows you to look up not only the path and method, but the description of that path and any parameters you need to supply.",
          "type": "string"
        },
        "rel": {
          "description": "Name of the link relation that, in addition to the type property, can be used to retrieve link details. For example, href or profile.",
          "type": "string"
        },
        "targetSchema": {
          "description": "Link to the metadata of the resource, such as JSON-schema, that describes the resource expected when dereferencing the target resource..",
          "type": "string"
        },
        "templated": {
          "description": "Boolean flag that specifies that \"href\" property is a URI or URI Template. If the property is a URI template, set this value to true. By default, this value is false.",
          "type": "boolean",
          "default": false
        },
        "title": {
          "description": "Exact copy of the \"summary\" field on the linked operation.",
          "type": "string"
        }
      }
    },
    "interfaceRightType": {
      "type": "object",
      "properties": {
        "code": {
          "description": "User defined code for an Interface Right.",
          "type": "string",
          "maxLength": 5,
          "minLength": 0
        },
        "description": {
          "description": "User defined description for an Interface Right.",
          "type": "string",
          "maxLength": 80,
          "minLength": 0
        },
        "hotelId": {
          "description": "Hotel Code to which the Interface Right belongs to.",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "interfaceId": {
          "description": "Unique DB internal number of a Hotel Interface record.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "interfaceRightDescription": {
          "description": "System Description of an allowed Interface Right.",
          "type": "string",
          "maxLength": 80,
          "minLength": 0
        },
        "right": {
          "description": "Internal code for each allowed right of a Hotel Interface record.",
          "type": "integer"
        }
      }
    },
    "links": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/instanceLink"
      }
    },
    "logicalOperatorType": {
      "type": "string",
      "enum": [
        "And",
        "Or"
      ]
    },
    "operaVersionNumberType": {
      "description": "Current Opera Version Number",
      "type": "string",
      "maxLength": 40,
      "minLength": 0
    },
    "otherFolioDeliveryMethodType": {
      "description": "Delivery Method configuration for Email and Fax Delivery for Other Folios",
      "type": "object",
      "properties": {
        "email": {
          "$ref": "#/definitions/emailDeliveryConfigurationType"
        },
        "fax": {
          "$ref": "#/definitions/faxDeliveryConfigurationType"
        }
      }
    },
    "publishersType": {
      "description": "Information of all the publishers for a given subscriber.",
      "type": "array",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/externalSystemType"
      }
    },
    "queueReservationDeliveryMethodType": {
      "description": "Queue reservation delivery method configuration, settings for Text Message Delivery of Queue Reservation status",
      "type": "object",
      "properties": {
        "textMessage": {
          "$ref": "#/definitions/textMessageDeliveryConfigurationType"
        }
      }
    },
    "queueRushDeliveryMethodType": {
      "description": "Queue rush delivery method configuration, settings for Text Message Delivery of Queue Reservation status",
      "type": "object",
      "properties": {
        "textMessage": {
          "$ref": "#/definitions/textMessageDeliveryConfigurationType"
        }
      }
    },
    "sftpConfigurationType": {
      "description": "Information which uniquely identifies SFTP Configuration",
      "type": "object",
      "properties": {
        "configurationId": {
          "description": "Unique id associated with this configuration",
          "type": "integer"
        },
        "description": {
          "description": "Description of the destination, such as Shift Reports.",
          "type": "string",
          "maxLength": 200,
          "minLength": 0
        },
        "destination": {
          "description": "SFTP destination",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "hotelId": {
          "description": "Hotel code",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "inactive": {
          "description": "Indicates whether the configuration is inactive or not.",
          "type": "boolean"
        }
      }
    },
    "sftpConfigurationsListType": {
      "description": "Type that holds sftp configurations",
      "type": "array",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/sftpConfigurationType"
      }
    },
    "status": {
      "description": "Existing Operations Responses will eventually be modified to be extended from this type.",
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "templateDeviceLocationType": {
      "description": "Contains Common Master configuration detail.",
      "type": "object",
      "properties": {
        "code": {
          "description": "Common Master unique code.",
          "type": "string",
          "maxLength": 40,
          "minLength": 0
        },
        "description": {
          "description": "Description of the Master code.",
          "$ref": "#/definitions/translationTextType2000"
        },
        "displayOrder": {
          "description": "Common Master record sequence number.",
          "type": "number"
        }
      }
    },
    "templateDeviceLocationsCriteria": {
      "description": "Request object for creating template Device locations.",
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/links"
        },
        "templateDeviceLocations": {
          "description": "Template Device locations to be created.",
          "$ref": "#/definitions/templateDeviceLocationsType"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "templateDeviceLocationsDetails": {
      "description": "Response object for fetching template Device locations.",
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/links"
        },
        "templateDeviceLocations": {
          "description": "Collection of template Device locations.",
          "$ref": "#/definitions/templateDeviceLocationsType"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "templateDeviceLocationsToBeChanged": {
      "description": "Request object for changing template Device locations.",
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/links"
        },
        "templateDeviceLocations": {
          "description": "Template Device locations to be changed.",
          "$ref": "#/definitions/templateDeviceLocationsType"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "templateDeviceLocationsType": {
      "description": "List of Device locations at template level.",
      "type": "array",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/templateDeviceLocationType"
      }
    },
    "textDeliveryMethodType": {
      "description": "Text delivery method type",
      "type": "string",
      "enum": [
        "Url",
        "Email"
      ]
    },
    "textMessageDeliveryConfigurationType": {
      "description": "Text message delivery configuration",
      "type": "object",
      "properties": {
        "account": {
          "description": "Text field for Service ID or email account for the SMTP as advised by Text Messaging Provider.",
          "type": "string",
          "maxLength": 80,
          "minLength": 0
        },
        "format": {
          "description": "Text field for entering any special formatting for the delivery, or multi select LOV type, for example the one used for Address Format for selection of SID fields, to allow users choosing from a list of tags that may be used to customize this field.",
          "type": "string",
          "maxLength": 4000,
          "minLength": 0
        },
        "hotelId": {
          "description": "Hotel code",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "message": {
          "description": "Text field for entering the Text Message for delivery.",
          "type": "string",
          "maxLength": 4000,
          "minLength": 0
        },
        "password": {
          "type": "string",
          "maxLength": 80,
          "minLength": 0
        },
        "serverName": {
          "description": "Text field for Service type or email server address for the SMTP.",
          "type": "string",
          "maxLength": 80,
          "minLength": 0
        },
        "timeOut": {
          "description": "Number field for Delivery time out in seconds for the message. Any message exceeding this limit will be timed out. Add word Seconds using small grey font next to the number box.",
          "type": "integer"
        },
        "type": {
          "description": "Type of Delivery Method HTTP/SMTP: HTTP for URL, SMTP for Email",
          "$ref": "#/definitions/textDeliveryMethodType"
        },
        "uRLParameter": {
          "description": "Url parameter(format) is supported by Text Messaging Provider, it can be either an XML or TEXT format.",
          "$ref": "#/definitions/urlFormatType"
        },
        "url": {
          "description": "Text field for URL address or the Text Messaging Provider.",
          "type": "string",
          "maxLength": 2000,
          "minLength": 0
        },
        "userId": {
          "description": "Partner or User ID, Text field for Partner ID or User ID for the delivery provider, Name of the Text Messaging Provider.",
          "type": "string",
          "maxLength": 80,
          "minLength": 0
        }
      }
    },
    "translationTextType2000": {
      "description": "Contains Multiple translated texts and language codes.",
      "type": "object",
      "properties": {
        "defaultText": {
          "description": "Default text with Character length from 0 to 2000.",
          "type": "string",
          "maxLength": 2000,
          "minLength": 0
        },
        "translatedTexts": {
          "description": "List of translated text and language codes.",
          "$ref": "#/definitions/translationsTextType"
        }
      }
    },
    "translationsTextType": {
      "description": "Language code for the translation.",
      "type": "array",
      "maxItems": 4000,
      "items": {
        "description": "Language code for the translation.",
        "type": "object",
        "properties": {
          "language": {
            "description": "Language identification.",
            "type": "string",
            "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*"
          },
          "value": {
            "description": "Used for Character Strings, length 0 to 2000.",
            "type": "string",
            "maxLength": 2000,
            "minLength": 0
          }
        }
      }
    },
    "uDFMappingType": {
      "description": "Generic self-contained request object that is used when updating and fetching UDFs.",
      "type": "object",
      "properties": {
        "active": {
          "description": "A flag to indicate whether the UDF mapping is active in the Interface system or not.",
          "type": "boolean"
        },
        "type": {
          "description": "A reference to the type of object defined by the Type for Reservation and Profile Type.",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "uDFLabel": {
          "description": "Label the user-defined function (UDF) field shared with external system which will be send in the request message for mapping of actual UDF Name.",
          "type": "string",
          "maxLength": 200,
          "minLength": 0
        },
        "uDFName": {
          "description": "Name of the user-defined function (UDF) field.",
          "type": "string",
          "maxLength": 40,
          "minLength": 0
        },
        "updateAllowed": {
          "description": "A flag to indicate whether the update is allowed in the Interface system or not.",
          "type": "boolean"
        }
      }
    },
    "uniqueID_Type": {
      "description": "An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).",
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
          "type": "string",
          "maxLength": 80,
          "minLength": 0
        },
        "type": {
          "description": "A reference to the type of object defined by the UniqueID element.",
          "type": "string",
          "maxLength": 40,
          "minLength": 0
        }
      }
    },
    "urlFormatType": {
      "description": "Url content format",
      "type": "string",
      "enum": [
        "Xml",
        "Text"
      ]
    },
    "warningType": {
      "description": "Used when a message has been successfully processed to report any warnings or business errors that occurred.",
      "type": "object",
      "properties": {
        "code": {
          "description": "If present, this refers to a table of coded values exchanged between applications to identify errors or warnings.",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "docURL": {
          "description": "If present, this URL refers to an online description of the error that occurred.",
          "type": "string",
          "maxLength": 2000
        },
        "language": {
          "description": "Language identification.",
          "type": "string",
          "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*"
        },
        "recordId": {
          "description": "If present, this attribute allows for batch processing and the identification of the record that failed amongst a group of records. This value may contain a concatenation of a unique failed transaction ID with specific record(s) associated with that transaction.",
          "type": "string",
          "maxLength": 2000
        },
        "rph": {
          "description": "Reference Place Holder used as an index for this warning.",
          "type": "string",
          "maxLength": 8,
          "minLength": 1
        },
        "shortText": {
          "description": "An abbreviated version of the error in textual format.",
          "type": "string",
          "maxLength": 2000
        },
        "status": {
          "description": "If present, recommended values are those enumerated in the ErrorRS, (NotProcessed Incomplete Complete Unknown) however, the data type is designated as string data, recognizing that trading partners may identify additional status conditions not included in the enumeration.",
          "type": "string",
          "maxLength": 2000
        },
        "tag": {
          "description": "If present, this attribute may identify an unknown or misspelled tag that caused an error in processing. It is recommended that the Tag attribute use XPath notation to identify the location of a tag in the event that more than one tag of the same name is present in the document. Alternatively, the tag name alone can be used to identify missing data [Type=ReqFieldMissing].",
          "type": "string",
          "maxLength": 2000
        },
        "type": {
          "description": "The Warning element MUST contain the Type attribute that uses a recommended set of values to indicate the warning type. The validating XSD can expect to accept values that it has NOT been explicitly coded for and process them by using Type =\"Unknown\".",
          "type": "string",
          "maxLength": 20,
          "minLength": 0
        },
        "value": {
          "description": "Property Value",
          "type": "string"
        }
      }
    },
    "warningsType": {
      "description": "Used in conjunction with the Success element to define a business error.",
      "type": "array",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/warningType"
      }
    }
  },
  "tags": [
    {
      "description": "The BEProcessor Service offers capability of creating, managing, and retrieving of BE Processor configuration.",
      "name": "BEProcessor"
    },
    {
      "name": "ExternalSystemsConfig"
    },
    {
      "description": "These APIs will allow you to do external configuration under Administration.",
      "name": "ChainConfig"
    }
  ],
  "externalDocs": {
    "description": "Find out more about Oracle Hospitality",
    "url": "https://docs.oracle.com/en/industries/hospitality/integration_platforms.html"
  }
}